name: Deploy application

on:
  workflow_run:
    workflows:
    - Test Application
    types:
    - completed

env:
  CD_APP_NAME: "Pirika"

jobs:
  deploy:
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-22.04
    permissions:
      contents: read
    strategy:
      matrix:
        include:
        - PATH: Server
          CD_GROUP_NAME: "Pirika_Server_Deploy"
          EC2_TAG_VALUE: ${{ vars.EC2_SERVER_TAG_VALUE }}
        - PATH: Client
          CD_GROUP_NAME: "Pirika_Client_Deploy"
          EC2_TAG_VALUE: ${{ vars.EC2_CLIENT_TAG_VALUE }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ vars.AWS_REGION }}
    
    - name: Create CodeDeploy App
      run:
        aws deploy create-application
        --application-name ${{ env.CD_APP_NAME }}
        --compute-platform "Server" || echo "La aplicaci√≥n ya existe"
      working-directory: ./${{matrix.PATH}}

    - name: Create Deployment Group
      run:
        aws deploy create-deployment-group
        --application-name ${{ env.CD_APP_NAME }}
        --deployment-group-name ${{ matrix.CD_GROUP_NAME }}
        --service-role-arn ${{ vars.IAM_ROLE }}
        --deployment-style deploymentType="IN_PLACE",deploymentOption="WITHOUT_TRAFFIC_CONTROL"
        --ec2-tag-filters Key=${{ vars.EC2_TAG_KEY }},Value=${{ matrix.EC2_TAG_VALUE }},Type="KEY_AND_VALUE" || echo "El grupo ya existe"
        #--deployment-config-name no hace falta ponerlo cuando se quiere emplear el "one-at-a-time", como es el caso
      working-directory: ./${{matrix.PATH}}

    - name: Create Deployment
      run:
        aws deploy create-deployment
        --application-name ${{ env.CD_APP_NAME }}
        --deployment-group-name ${{ matrix.CD_GROUP_NAME }}
        --github-location repository=${{ github.repository }},commitId=${{ github.sha }}
        #--revision revisionType="GitHub",s3Location=,gitHubLocation={repository=${{ env.GITHUB_REPOSITORY }},commitId=${{ env.GITHUB_SHA }}},string=,appSpecContent=
      working-directory: ./${{matrix.PATH}}